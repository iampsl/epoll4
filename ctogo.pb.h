// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctogo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ctogo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ctogo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ctogo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ctogo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ctogo_2eproto;
class QueryUserInfoReq;
class QueryUserInfoReqDefaultTypeInternal;
extern QueryUserInfoReqDefaultTypeInternal _QueryUserInfoReq_default_instance_;
class QueryUserInfoRsp;
class QueryUserInfoRspDefaultTypeInternal;
extern QueryUserInfoRspDefaultTypeInternal _QueryUserInfoRsp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::QueryUserInfoReq* Arena::CreateMaybeMessage<::QueryUserInfoReq>(Arena*);
template<> ::QueryUserInfoRsp* Arena::CreateMaybeMessage<::QueryUserInfoRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CmdID : int {
  HEART_BEAT = 0,
  QUERY_USER_INFO = 1,
  CmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdID_IsValid(int value);
constexpr CmdID CmdID_MIN = HEART_BEAT;
constexpr CmdID CmdID_MAX = QUERY_USER_INFO;
constexpr int CmdID_ARRAYSIZE = CmdID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdID_descriptor();
template<typename T>
inline const std::string& CmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdID_descriptor(), enum_t_value);
}
inline bool CmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmdID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdID>(
    CmdID_descriptor(), name, value);
}
// ===================================================================

class QueryUserInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueryUserInfoReq) */ {
 public:
  inline QueryUserInfoReq() : QueryUserInfoReq(nullptr) {}
  virtual ~QueryUserInfoReq();

  QueryUserInfoReq(const QueryUserInfoReq& from);
  QueryUserInfoReq(QueryUserInfoReq&& from) noexcept
    : QueryUserInfoReq() {
    *this = ::std::move(from);
  }

  inline QueryUserInfoReq& operator=(const QueryUserInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserInfoReq& operator=(QueryUserInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryUserInfoReq& default_instance();

  static inline const QueryUserInfoReq* internal_default_instance() {
    return reinterpret_cast<const QueryUserInfoReq*>(
               &_QueryUserInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryUserInfoReq& a, QueryUserInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryUserInfoReq* New() const final {
    return CreateMaybeMessage<QueryUserInfoReq>(nullptr);
  }

  QueryUserInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryUserInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryUserInfoReq& from);
  void MergeFrom(const QueryUserInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueryUserInfoReq";
  }
  protected:
  explicit QueryUserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctogo_2eproto);
    return ::descriptor_table_ctogo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // string UserName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:QueryUserInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctogo_2eproto;
};
// -------------------------------------------------------------------

class QueryUserInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QueryUserInfoRsp) */ {
 public:
  inline QueryUserInfoRsp() : QueryUserInfoRsp(nullptr) {}
  virtual ~QueryUserInfoRsp();

  QueryUserInfoRsp(const QueryUserInfoRsp& from);
  QueryUserInfoRsp(QueryUserInfoRsp&& from) noexcept
    : QueryUserInfoRsp() {
    *this = ::std::move(from);
  }

  inline QueryUserInfoRsp& operator=(const QueryUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserInfoRsp& operator=(QueryUserInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryUserInfoRsp& default_instance();

  static inline const QueryUserInfoRsp* internal_default_instance() {
    return reinterpret_cast<const QueryUserInfoRsp*>(
               &_QueryUserInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryUserInfoRsp& a, QueryUserInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryUserInfoRsp* New() const final {
    return CreateMaybeMessage<QueryUserInfoRsp>(nullptr);
  }

  QueryUserInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryUserInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryUserInfoRsp& from);
  void MergeFrom(const QueryUserInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QueryUserInfoRsp";
  }
  protected:
  explicit QueryUserInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ctogo_2eproto);
    return ::descriptor_table_ctogo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kMoneyFieldNumber = 3,
  };
  // string UserName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // fixed32 Money = 3;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::uint32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:QueryUserInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ctogo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryUserInfoReq

// string UserName = 1;
inline void QueryUserInfoReq::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& QueryUserInfoReq::username() const {
  // @@protoc_insertion_point(field_get:QueryUserInfoReq.UserName)
  return _internal_username();
}
inline void QueryUserInfoReq::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:QueryUserInfoReq.UserName)
}
inline std::string* QueryUserInfoReq::mutable_username() {
  // @@protoc_insertion_point(field_mutable:QueryUserInfoReq.UserName)
  return _internal_mutable_username();
}
inline const std::string& QueryUserInfoReq::_internal_username() const {
  return username_.Get();
}
inline void QueryUserInfoReq::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryUserInfoReq::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryUserInfoReq.UserName)
}
inline void QueryUserInfoReq::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:QueryUserInfoReq.UserName)
}
inline void QueryUserInfoReq::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryUserInfoReq.UserName)
}
inline std::string* QueryUserInfoReq::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryUserInfoReq::release_username() {
  // @@protoc_insertion_point(field_release:QueryUserInfoReq.UserName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryUserInfoReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryUserInfoReq.UserName)
}

// -------------------------------------------------------------------

// QueryUserInfoRsp

// string UserName = 1;
inline void QueryUserInfoRsp::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& QueryUserInfoRsp::username() const {
  // @@protoc_insertion_point(field_get:QueryUserInfoRsp.UserName)
  return _internal_username();
}
inline void QueryUserInfoRsp::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:QueryUserInfoRsp.UserName)
}
inline std::string* QueryUserInfoRsp::mutable_username() {
  // @@protoc_insertion_point(field_mutable:QueryUserInfoRsp.UserName)
  return _internal_mutable_username();
}
inline const std::string& QueryUserInfoRsp::_internal_username() const {
  return username_.Get();
}
inline void QueryUserInfoRsp::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryUserInfoRsp::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryUserInfoRsp.UserName)
}
inline void QueryUserInfoRsp::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:QueryUserInfoRsp.UserName)
}
inline void QueryUserInfoRsp::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryUserInfoRsp.UserName)
}
inline std::string* QueryUserInfoRsp::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryUserInfoRsp::release_username() {
  // @@protoc_insertion_point(field_release:QueryUserInfoRsp.UserName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryUserInfoRsp::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryUserInfoRsp.UserName)
}

// string Password = 2;
inline void QueryUserInfoRsp::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& QueryUserInfoRsp::password() const {
  // @@protoc_insertion_point(field_get:QueryUserInfoRsp.Password)
  return _internal_password();
}
inline void QueryUserInfoRsp::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:QueryUserInfoRsp.Password)
}
inline std::string* QueryUserInfoRsp::mutable_password() {
  // @@protoc_insertion_point(field_mutable:QueryUserInfoRsp.Password)
  return _internal_mutable_password();
}
inline const std::string& QueryUserInfoRsp::_internal_password() const {
  return password_.Get();
}
inline void QueryUserInfoRsp::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QueryUserInfoRsp::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QueryUserInfoRsp.Password)
}
inline void QueryUserInfoRsp::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:QueryUserInfoRsp.Password)
}
inline void QueryUserInfoRsp::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QueryUserInfoRsp.Password)
}
inline std::string* QueryUserInfoRsp::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QueryUserInfoRsp::release_password() {
  // @@protoc_insertion_point(field_release:QueryUserInfoRsp.Password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryUserInfoRsp::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QueryUserInfoRsp.Password)
}

// fixed32 Money = 3;
inline void QueryUserInfoRsp::clear_money() {
  money_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUserInfoRsp::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryUserInfoRsp::money() const {
  // @@protoc_insertion_point(field_get:QueryUserInfoRsp.Money)
  return _internal_money();
}
inline void QueryUserInfoRsp::_internal_set_money(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  money_ = value;
}
inline void QueryUserInfoRsp::set_money(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:QueryUserInfoRsp.Money)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CmdID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CmdID>() {
  return ::CmdID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ctogo_2eproto
